Problem C:

#include <bits/stdc++.h>
#define MAX 10010
#define INF 0x3F3F3F3F

using namespace std;

int tests, i, j, d, n, m, s, k, t, b, e, w, res;
int used[MAX], dist[MAX], distR[MAX];

struct edge{
  int node, dist;
  edge(int node, int dist) : node(node), dist(dist) {}
};

bool operator< (edge a, edge b){
  return a.dist > b.dist;
}

int min(int i, int j){
  return (i < j) ? i : j;
}

vector<vector<edge> > g, gr;

void Dijkstra(vector<vector<edge> > &g, int *d, int start)
{
    int v, to, cost;
    memset(used,0,sizeof(used));
    priority_queue<edge> pq;
    pq.push(edge(start,0));
    while(!pq.empty()){
    edge e = pq.top(); pq.pop();
        v = e.node;
        if (e.dist > d[v]) continue;
        for(j = 0; j < g[v].size(); j++){
            to = g[v][j].node;
            cost = g[v][j].dist;
            if (!used[to] && (d[to] > d[v] + cost)){
                d[to] = d[v] + cost;
                pq.push(edge(to,d[to]));
            }
        }
    }
}

int main(void){
    cin >> tests;
    while(tests--){
    cin >> n >> m >> k >> s >> t;
    g.clear(); g.resize(n+1);
    gr.clear();gr.resize(n+1);
    for(i = 0; i < m; i++){
        scanf("%d %d %d",&b,&e,&w);
        g[b].push_back(edge(e,w));
        gr[e].push_back(edge(b,w));
    }
    
    memset(dist,0x3F,sizeof(dist));
    dist[s] = 0;
    memset(distR,0x3F,sizeof(distR));
    distR[t] = 0;
    Dijkstra(g,dist,s);
    Dijkstra(gr,distR,t);
    res = dist[t];
    for(i = 0; i < k; i++){
        scanf("%d %d %d",&b,&e,&w);
        res = min(res, dist[b] + w + distR[e]);
        res = min(res, dist[e] + w + distR[b]);
    }
    
    if (res == INF)
        printf("-1\n");
    else
        printf("%d\n",res);
  }
  return 0;

}

Problem D:

#include <bits/stdc++.h>
using namespace std ;

int main (){
    int t;
    cin >> t;
    for(int i= 1; i<=t; i++){
        map < string , string >next, pre;
        int n;
        cin >> n;
        n =n- 1 ;
        string tmp,s,s1;
        while (n-- ){
            cin >> s >> s1;
            next[s] = s1;
            pre[s1] = s;
        }
        while (pre[s]!= "" )
            s = pre[s];
            printf("Scenario #%d:\n", i);
            cout << s << endl;
            while (next[s]!= "" ){
            cout << next[s] << endl;
            s = next[s];
        }
        cout << endl;
    }
    return 0 ;
}

Problem F:

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n, m, in[10001] = {0}, a, b;
    vector<int> topo;
    vector<vector<int>> arr(10001);
    priority_queue<int, vector<int>, greater<int> > que;
    
    cin >> n >> m;
    while (m--){
        scanf("%d%d", &a, &b);
        arr[a].push_back(b);
        ++in[b];
    }
    for(int i = 1; i <= n; ++i)
        if(!in[i])
            que.push(i);
        
    while(!que.empty()){
        int temp = que.top();
        que.pop();
        topo.push_back(temp);
        for(auto i(arr[temp].begin()); i != arr[temp].end(); ++i)
            if(--in[*i] == 0)que.push(*i);
    }
    
    if(topo.size() < n)
        cout << "Sandro fails.";
    else 
        for(int i = 0; i<topo.size(); i++)
            cout << topo[i] << " ";
                
    putchar('\n');
    
    return 0;
}

Problem G:

#include <stdio.h>
#include <string.h>
#include <iostream>
using namespace std;

int n, m, i, j, ans, sum;
string map[21];
char now;
bool visit[21][21];

void dfs(int x, int y)
{
    if(y < 0)   
        y = m-1;
    if(y >= m)  
        y = 0;

    if(x < 0 || x >= n || visit[x][y] == true || map[x][y] != now) 
        return ;

    visit[x][y] = true;
    sum++;

    dfs(x+1, y);
    dfs(x, y+1);
    dfs(x-1, y);
    dfs(x, y-1);
}
int main()
{
    while(cin >> n >> m)
    {
        memset(visit, false, sizeof(visit));

        for(i = 0; i < n; i++)  
            cin >> map[i];
            
        cin >> i >> j;
        now = map[i][j];
        dfs(i, j);
        ans = 0;

        for(i = 0; i < n; i++) {
            for(j = 0; j < m; j++) {
                sum = 0;
                if(visit[i][j]==false)
                    dfs(i, j);
                if(sum > ans)
                    ans = sum;
            }
        }
        cout << ans << endl;
    }
}

Problem J:

#include<bits/stdc++.h>
using namespace std;

int c[1010], vis[1010];
int a,b,f;
struct note
{
    int x,s;
};
int prime(int n){
    if(n<2)
        return 0;
    for(int i=2; i<n; i++)
        if(n%i==0)
            return 0;
    return 1;
}
void bfs(int x)
{
    queue<note>Q;
    note p,q;
    p.x = x;
    p.s = 0;
    vis[x] = 1;
    Q.push(p);
    while(!Q.empty())
    {
        p=Q.front();
        Q.pop();
        if(p.x==b){
            f=p.s;
            break;
        }
        for(int i=2; i<p.x; i++){
            if(c[i]==0||p.x+i>b||p.x%i!=0||vis[p.x+i])
                continue;
            q.x=p.x+i;
            vis[q.x]=1;
            q.s=p.s+1;
            Q.push(q);
        }
    }
    return;
}

int main()
{
    int k=0,    flag=0;
    for(int i=2; i<=1005; i++)
        c[i]=prime(i);
        
    int t;
    scanf("%d",&t);
    while(t--){
        f=-1;
        memset(vis,0,sizeof(vis));
        scanf("%d%d",&a,&b);
        bfs(a);
        printf("Case %d: %d\n",++flag,f);
    }
    return 0;
}

Problem K:

#include <bits/stdc++.h>
using namespace std;
#define N 50000

vector<int>v[N];
int color[N];

int M;
void dfs(int u)
{
    if(color[u]==1) return;
        color[u]=-1;
    for(int i=0; i<v[u].size(); i++){
        int V=v[u][i];
        if(color[V]==0)
            dfs(V);
    }
    M++;
    color[u]=1;
}
int main()
{
    int t;
    int n,m,l;
    cin>>t;
    while(t--)
    {
        cin >> n >> m >> l;
        memset(color,0,sizeof(color));
        for(int i=0; i<=n; i++)
            v[i].clear();
        while(m--){
            int x,y;
            cin>>x>>y;
            v[x].push_back(y);
        }
        M=0;
        while(l--){
            int z;
            cin>>z;
            dfs(z);
        }
        cout << M << endl;
    }
}

Problem M:

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm> 
using namespace std;

#define inf 0x3f3f3f3f

struct edge
{
    int from;
    int to;
    int cost;
};

int len1[10005], len2[10005];

int main(){
    int n, r;
    cin >> n >> r;
    int x, y, c;
    vector<edge> save[10005];
    for(int i=1;i<=r;i++){
        cin >> x >> y >> c;
        edge a,b;
        a.from=x,a.to=y,a.cost=c;
        b.from=y,b.to=x,b.cost=c;
        save[x].push_back(a);
        save[y].push_back(b);
    }
    fill(len1+1,len1+n+1,inf);
    fill(len2+1,len2+n+1,inf);
    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > que;
    len1[1]=0;
    que.push(pair<int,int>(0,1));
    while(que.size()){
        int l=que.top().first;
        int w=que.top().second;
        que.pop();
        if(l>len2[w])
            continue;
        if(l<=len1[w])
            len1[w]=l;
        else
            len2[w]=l;
        for(int i=0; i <(int)save[w].size();i++){
            edge e=save[w][i];
            if(len1[e.to]>=l+e.cost){
                len1[e.to]=l+e.cost;
                que.push(pair<int,int>(len1[e.to],e.to));
            }
            else if(len2[e.to]>l+e.cost){
                len2[e.to]=l+e.cost;
                que.push(pair<int,int>(len2[e.to],e.to));
            }
        }
     }
     cout << len2[n] << endl ;
     return 0;
    }
